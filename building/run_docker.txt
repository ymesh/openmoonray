Step 1. Base requirements

> cd <moonray_repo>/building
> docker build -t openmoonray_base . --file Dockerfile


Step 2. Build the remaining dependencies

# docker run -v <moonray_repo>/building:/building -v <nvidia-download-dir>:/optix --network=host --rm -it openmoonray_base

docker run -v /home/data/code/me/openmoonray/building:/building -v /home/data/tools/NVidia/OptiX:/optix --network=host --rm -it openmoonray_base

> cd /build
> cmake ../building
> cmake --build . -- -j 8


> rm -rf /build/*
> mkdir /installs/optix
> cp -r /optix/include /installs/optix

> docker ps

CONTAINER ID        IMAGE               ...
c3a90b08a53a        openmoonray_base    ...

> docker commit c3a90b08a53a openmoonray_build

Step 3. Build MoonRay

> docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp --network=host --rm -it openmoonray_build

> cd /openmoonray
> cmake --preset container-release
> cmake --build --preset container-release -- -j 64
> mkdir /installs/openmoonray
> cmake --install ../build --prefix /installs/openmoonray

> source /installs/openmoonray/scripts/setup.sh
> moonray -in /openmoonray/testdata/rectangle.rdla -out /tmp/rectangle.exr

> docker ps

CONTAINER ID        IMAGE               ...
71b4c31684f8       openmoonray_build    ...

> docker commit 71b4c31684f8 openmoonray_run

docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp --network=host --rm -it openmoonray_run

> source /installs/openmoonray/scripts/setup.sh
> hd_render -in /openmoonray/testdata/sphere.usd -out /tmp/sphere.exr


4. Running moonray_gui

> docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp -e DISPLAY=$DISPLAY -e XAUTHORITY=${XAUTHORITY} -v "${XAUTHORITY}:${XAUTHORITY}:z" --network=host --rm -it openmoonray_run

> yum install -y libxkbcommon-x11
> source /installs/openmoonray/scripts/setup.sh
> moonray_gui -in /openmoonray/testdata/rectangle.rdla -out /tmp/rectangle.exr

docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp -e DISPLAY=$DISPLAY -e XAUTHORITY=${XAUTHORITY} -v "${XAUTHORITY}:${XAUTHORITY}:z" --network=host --rm -it openmoonray_run_gui

-v "/run/user/1000/gdm:/run/user/1000/gdm"

export XDG_RUNTIME_DIR=/run/user/1000

docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp -e DISPLAY=$DISPLAY -e XAUTHORITY=${XAUTHORITY} -v "/run/user/1000/gdm:/run/user/1000/gdm:z" -v /tmp/.X11-unix:/tmp/.X11-unix  -env="QT_X11_NO_MITSHM=1" --network=host --rm -it openmoonray_run_gui

xhost +local:docker 

sudo docker run -itd --restart unless-stopped --name my_container --privileged --net=host --gpus all \
    --env="NVIDIA_DRIVER_CAPABILITIES=all" \
    --env="DISPLAY=$DISPLAY" \
    --env="QT_X11_NO_MITSHM=1" \
    --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
    my_image:v1.1 

-v /tmp/.X11-unix:/tmp/.X11-unix
XSOCK=/tmp/.X11-unix/X1

Let docker access the X server

xhost +local:docker
Create the X11 Unix socket and the X authentication file

export XSOCK=/tmp/.X11-unix
export XAUTH=/tmp/.docker.xauth
Add proper permissions

xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
Set the Qt rendering speed to "native", so it doesn't bypass the X11 rendering engine

export QT_GRAPHICSSYSTEM=native
Tell Qt to not use MIT-SHM (shared memory) - that way it should be also safer security-wise

export QT_X11_NO_MITSHM=1
Update the docker run command

docker run -it \
           -e DISPLAY=$DISPLAY \
           -e XAUTHORITY=$XAUTH \
           -v $XSOCK:$XSOCK \
           -v $XAUTH:$XAUTH \
           --runtime=nvidia \
           --device=/dev/video0:/dev/video0 \
           nvcr.io/nvidia/pytorch:19.10-py3
Note: When you finish the the project, return the access controls at their default value - xhost -local:docker

docker run -v /home/data/code/me/openmoonray:/openmoonray -v /tmp:/tmp -e DISPLAY=$DISPLAY -e XAUTHORITY=${XAUTH}  -e QT_X11_NO_MITSHM=1 -e QT_GRAPHICSSYSTEM=native --network=host --rm -it openmoonray_run_gui

--user="$(id --user):$(id --group)"
